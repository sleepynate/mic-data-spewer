import java.applet.Applet;import java.awt.Color;import java.awt.Graphics;import javax.sound.sampled.AudioFormat;import javax.sound.sampled.AudioSystem;import javax.sound.sampled.DataLine;import javax.sound.sampled.TargetDataLine;public class MicDataSpewer extends Applet {	private static final long serialVersionUID = 1L;	TargetDataLine dataline;	SamplingThread sampleThread;	AudioFormat audioFormat;	int dispError = 0;	Float avgAmp = 0f;		Float runningAvg = 0f;	Integer runningAvgCount = 0;	public void start() {		audioFormat = new AudioFormat(44100.0F, 16, 1, true, false);		DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class,				audioFormat);		try {			dataline = (TargetDataLine) AudioSystem.getLine(dataLineInfo);			dataline.open(audioFormat);			sampleThread = new SamplingThread();			sampleThread.start();		} catch (Exception e2) {			dispError = 1;			repaint();			System.out.println("Error : Unable to start acqusition -> " + e2);		}	}	public class SamplingThread extends Thread {		boolean running = false;		public void run() {			running = true;			try {				int sampleSize = 8*1024;				byte sampleBuffer[] = new byte[sampleSize];				dataline.start();				while (running						&& dataline.read(sampleBuffer, 0, sampleSize) > 0) {					avgAmp = 0f;					for (int i = 0; i < sampleSize; i++) {						avgAmp += Math.abs(sampleBuffer[i]);					}					avgAmp /= (float) sampleSize;					runningAvg = (avgAmp + runningAvgCount*runningAvg)/(runningAvgCount+1);					runningAvgCount++;					repaint();				}								dataline.flush();				dataline.close();			} catch (Exception e) {				dispError = 1;				System.out.println(e);				System.exit(0);			}		}	}	public void paint(Graphics g) {		if (dispError == 1) {			g.setColor(Color.black);			g.drawString("Error : Unable to start acquisition", 86, 124);			this.sampleThread.running = false;			return;		}		if (avgAmp != 0) {			g.drawString("Average: " + runningAvg.toString(), 20, 60);			g.drawString("Count: " + runningAvgCount.toString(), 20, 80);		} else {			g.drawString("Loading...", 20, 60);		}	}}